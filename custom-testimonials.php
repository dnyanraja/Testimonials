<?php 
 /*
   Plugin Name: Complete Testimonials Solution
   Plugin URI: http://webandseoguide.tk/
   Description: This plugin creates custom post called testimonials, where you can add testimonials for your site. 
  Then displays all the testinmonials using shortcode.
   Version: 1.0.0
   Author:  Ganesh Veer
   Author URI: http://webandseoguide.tk/
   License: GPL2
   */
function themeslug_enqueue_script() {
	wp_enqueue_script('my-fsjs', plugins_url('/js/jquery.flexslider-min.js', __FILE__),  array('jquery'));
	wp_enqueue_script('my-fsjs', plugins_url('/js/jquery.flexslider.js', __FILE__),  array('jquery'));
	wp_enqueue_script('my-fsjs');
}
function themeslug_enqueue_style() {
   wp_register_style('my_css', plugins_url( '/css/flexslider.css', __FILE__ ), false, '1.1.0');
   wp_enqueue_style ('my_css');
}
add_action('wp_enqueue_scripts', 'themeslug_enqueue_style');
add_action('wp_enqueue_scripts', 'themeslug_enqueue_script');

function wp_header_call(){
?>
<script type="text/javascript" charset="utf-8">
(function($){
	$(window).load(function(){
		$('.flexslider').flexslider({
		    animation: "slide"
		});
	});
	$(window).load(function() {
	  $('.flexslider-carousel').flexslider({
	    animation: "slide",
	    animationLoop: false,
	    itemWidth: 235,
	    itemMargin: 5
	  });
	});
})(jQuery);
</script>
<?php 
}
add_action('wp_head', 'wp_header_call');

// Register Custom Post Type - Testimonials
function testimonials_post_type(){

	$labels = array(
		'name'                  => _x( 'Testimonials', 'Post Type General Name', 'text_domain' ),
		'singular_name'         => _x( 'Testimonial', 'Post Type Singular Name', 'text_domain' ),
		'menu_name'             => __( 'Testimonials', 'text_domain' ),
		'name_admin_bar'        => __( 'Testimonials', 'text_domain' ),
		'archives'              => __( 'All Testimonials', 'text_domain' ),
		'parent_item_colon'     => __( 'Parent Item:', 'text_domain' ),
		'all_items'             => __( 'All Testimonials', 'text_domain' ),
		'add_new_item'          => __( 'Add New Testimonial', 'text_domain' ),
		'add_new'               => __( 'Add New', 'text_domain' ),
		'new_item'              => __( 'New testimonial', 'text_domain' ),
		'edit_item'             => __( 'Edit testimonial', 'text_domain' ),
		'update_item'           => __( 'Update testimonial', 'text_domain' ),
		'view_item'             => __( 'View testimonial', 'text_domain' ),
		'search_items'          => __( 'Search testimonial', 'text_domain' ),
		'not_found'             => __( 'Not found', 'text_domain' ),
		'not_found_in_trash'    => __( 'Not found in Trash', 'text_domain' ),
		'featured_image'        => __( 'Featured Image', 'text_domain' ),
		'set_featured_image'    => __( 'Set featured image', 'text_domain' ),
		'remove_featured_image' => __( 'Remove featured image', 'text_domain' ),
		'use_featured_image'    => __( 'Use as featured image', 'text_domain' ),
		'insert_into_item'      => __( 'Insert into testimonial', 'text_domain' ),
		'uploaded_to_this_item' => __( 'Uploaded to this testimonial', 'text_domain' ),
		'items_list'            => __( 'Items list', 'text_domain' ),
		'items_list_navigation' => __( 'Items list navigation', 'text_domain' ),
		'filter_items_list'     => __( 'Filter testimonials list', 'text_domain' ),
	);
	$args = array(
		'label'                 => __( 'Testimonial', 'text_domain' ),
		'description'           => __( 'testimonials', 'text_domain' ),
		'labels'                => $labels,
		'supports'              => array( 'title', 'editor', 'author', 'thumbnail', 'trackbacks', 'custom-fields', ),
		'taxonomies'            => array( 'category' ),
		'hierarchical'          => false,
		'public'                => true,
		'show_ui'               => true,
		'show_in_menu'          => true,
		'menu_position'         => 5,
		'menu_icon'             => 'dashicons-format-status',
		'show_in_admin_bar'     => true,
		'show_in_nav_menus'     => true,
		'can_export'            => true,
		'has_archive'           => true,		
		'exclude_from_search'   => false,
		'publicly_queryable'    => true,
		'capability_type'       => 'page',
	);
	register_post_type( 'testimonials', $args );
}
add_action( 'init', 'testimonials_post_type', 0 );

/**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/tool/wordpress-meta-box-generator/
 */
/*
	Usage: author_name_get_meta( 'author_name_author' )
*/
function author_name_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}
function author_name_add_meta_box() {
	add_meta_box(
		'author_name-author-name',
		__( 'Author Name', 'author_name' ),
		'author_name_html',
		'Testimonials',
		'normal',
		'default'
	);
}
add_action( 'add_meta_boxes', 'author_name_add_meta_box' );
function author_name_html( $post) {
	wp_nonce_field( '_author_name_nonce', 'author_name_nonce' ); ?>
	<p>Enter Name of this testimonial author</p>
	<p>
		<input type="text" name="author_name_author" id="author_name_author" value="<?php echo author_name_get_meta( 'author_name_author' ); ?>">
	</p><?php
}
function author_name_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['author_name_nonce'] ) || ! wp_verify_nonce( $_POST['author_name_nonce'], '_author_name_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post', $post_id ) ) return;

	if ( isset( $_POST['author_name_author'] ) )
		update_post_meta( $post_id, 'author_name_author', esc_attr( $_POST['author_name_author'] ) );
}
add_action( 'save_post', 'author_name_save' );

// Register Shortcode for testimonials
// Usage : 	[list-testimonials]
function testimonials_shortcode($atts) {
	$atts = shortcode_atts(
			array(
				'count' => '2',
			), $atts, 'list-testimonials' );
	$args = array(
			'post_type'=> 'Testimonials',
			'order'    => 'ASC',
			'showposts' => $atts['count']
			);
	query_posts( $args );
	// The Loop
	while ( have_posts() ) : the_post();
	    echo '<div class="testimonials" style="overflow:hidden;">';
	    echo '<h3>'.get_the_title().'</h3>';
		echo '<blockquote>'.get_the_excerpt().'</blockquote>';
			$thumb_id = get_post_thumbnail_id();
			$thumb_url_array = wp_get_attachment_image_src($thumb_id, 'thumbnail-size', true);
			$thumb_url = $thumb_url_array[0]; 
		echo '<img src="'.$thumb_url.'"  style="width:70px;height:70px;border-radius:35px;" /> ';
		echo author_name_get_meta( 'author_name_author' );
	    echo '</div><br style="clear:both;"/>';
	endwhile;
	// Reset Query
	wp_reset_query();
}
add_shortcode( 'testimonials-list', 'testimonials_shortcode' );

// Register Shortcode for testimonials slider
// Usage : 	[testimonials-slider]
function testimonial_slider_shortcode($atts) {
	$atts = shortcode_atts(
				array(
					'count' => '2',
				), $atts, 'testimonials-slider' );
	$args = array(
			'post_type'=> 'Testimonials',
			'order'    => 'ASC',
			'showposts' => $atts['count']
			);
	query_posts( $args );
		?>
<div class="flexslider">
  <ul class="slides">
	 <?php  	
	 	while ( have_posts() ) : the_post(); 
		    echo '<li>';
		    echo '<div class="testimonials">';
		    echo '<h3>'.get_the_title().'</h3>';
			echo '<blockquote>'.get_the_content().'</blockquote>';
				$thumb_id = get_post_thumbnail_id();
				$thumb_url_array = wp_get_attachment_image_src($thumb_id, 'thumbnail-size', true);
				$thumb_url = $thumb_url_array[0]; 
			echo '<img src="'.$thumb_url.'"  style="width:70px;height:70px;border-radius:35px;" /> ';
			echo author_name_get_meta( 'author_name_author' );
	    	echo '</div>';
		endwhile; 
		// Reset Query
		wp_reset_query();
   	?>
  </ul>
</div>
<?php
}
add_shortcode( 'testimonials-slider', 'testimonial_slider_shortcode' );

// Register Shortcode for testimonials slider
// Usage : 	[testimonials-slider]
function testimonial_slider_corousel_shortcode($atts) {
	$atts = shortcode_atts(
				array(
					'count' => '2',
				), $atts, 'testimonials-slider' );
	$args = array(
			'post_type'=> 'Testimonials',
			'order'    => 'ASC',
			'showposts' => $atts['count']
			);
	query_posts( $args );
		?>
<div class="flexslider-carousel">
  <ul class="slides">
 <?php  	
 	while ( have_posts() ) : the_post(); 
	    echo '<li>';
	    echo '<div class="testimonials">';
	    echo '<h3>'.get_the_title().'</h3>';
		echo '<div style="font-size:14px;">'.get_the_excerpt().'</div>';
		echo author_name_get_meta( 'author_name_author' );
	   	echo '</div>';
	endwhile; 
	// Reset Query
	wp_reset_query();
   	?>
  </ul>
</div>
<?php
}
add_shortcode( 'testimonials-slider-carousel', 'testimonial_slider_corousel_shortcode' );

/**
 * 
 * Create Widget to display testomonials as slider or as static list.
 *
 */
class My_Widget_Testimonials extends WP_Widget {

	/**
	 * Sets up the widgets name etc
	 */
	public function __construct() {
		$widget_ops = array( 
			'classname' => 'my_widget_testimonials',
			'description' => 'Testimonials',
		);
		parent::__construct( 'my_widget_testimonials', 'Testimonials', $widget_ops );
	}

	/**
	 * Outputs the content of the widget
	 * @param array $args
	 * @param array $instance
	 */
	public function widget( $args, $instance ) {
		// outputs the content of the widget
		echo $args['before_widget'];
		if ( ! empty( $instance['title'] ) ) {
			echo $args['before_title'] . apply_filters( 'widget_title', $instance['title'] ). $args['after_title'];
		}
		$display_type = $instance['display_type']; 
		
		if(! empty($display_type)){
		if($display_type =='slider'){
						$args = array('post_type'=> 'Testimonials', 'order' => 'ASC', 'showposts' => -1);
						query_posts( $args );
						?>
						<div class="flexslider">
						  <ul class="slides">
							 <?php  	
							 	while ( have_posts() ) : the_post(); 
								    echo '<li>';
								    echo '<div class="testimonials">';
								    echo '<h3>'.get_the_title().'</h3>';
									echo '<blockquote>'.get_the_content().'</blockquote>';
										$thumb_id = get_post_thumbnail_id();
										$thumb_url_array = wp_get_attachment_image_src($thumb_id, 'thumbnail-size', true);
										$thumb_url = $thumb_url_array[0]; 
									echo '<img src="'.$thumb_url.'"  style="width:70px;height:70px;border-radius:35px;" /> ';
									echo author_name_get_meta( 'author_name_author' );
							    	echo '</div>';
								endwhile; 
								// Reset Query
						wp_reset_query();
						   	?>
						  </ul>
						</div>
						<?php
						}else{
						$args = array('post_type'=> 'Testimonials',	'order'=> 'ASC','showposts' => 3);
						query_posts( $args );
							// The Loop
							while ( have_posts() ) : the_post();
							    echo '<div class="testimonials" style="overflow:hidden;">';
							    echo '<h3>'.get_the_title().'</h3>';
								echo '<blockquote>'.get_the_excerpt().'</blockquote>';
									$thumb_id = get_post_thumbnail_id();
									$thumb_url_array = wp_get_attachment_image_src($thumb_id, 'thumbnail-size', true);
									$thumb_url = $thumb_url_array[0]; 
								echo '<img src="'.$thumb_url.'"  style="width:70px;height:70px;border-radius:35px;" /> ';
								echo author_name_get_meta( 'author_name_author' );
							    echo '</div><br style="clear:both;"/>';
							endwhile;
							// Reset Query
						wp_reset_query();
					}
			echo $args['after_widget'];
			}
		}
	/**
	 * Outputs the options form on admin
	 *
	 * @param array $instance The widget options
	 */
	public function form( $instance ) {
		// outputs the options form on admin
		$title = ! empty( $instance['title'] ) ? $instance['title'] : __( 'New title', 'text_domain' );
		?>
		<p>
		<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 
		<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>">
		</p>
		<p>
		<label for="<?php echo $this->get_field_id( 'display_type' ); ?> "><?php _e('Display Testimonials as:', 'display_type'); ?></label>
		<select id="<?php echo $this->get_field_id( 'display_type' ); ?>" name="<?php echo $this->get_field_name( 'display_type' ); ?>">
     		<option value="slider">Slider</option>
     		<option value="plain_text">Plain Text</option>
		</select>
		</p>
	<?php }
	/**
	 * Processing widget options on save
	 *
	 * @param array $new_instance The new options
	 * @param array $old_instance The previous options
	 */
	public function update( $new_instance, $old_instance ) {
		// processes widget options to be saved
		$instance = array();
		$instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
		$instance['display_type'] = $new_instance['display_type'];

		return $instance;
	}
}

add_action('widgets_init',
	create_function('', 'return register_widget("My_Widget_Testimonials");')
);

?>